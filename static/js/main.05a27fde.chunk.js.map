{"version":3,"sources":["App.tsx","index.tsx"],"names":["operations","generateEmptyGrid","rows","i","push","Array","from","App","useState","grid","setGrid","running","setRunning","runningRef","useRef","current","runSimulation","useCallback","g","produce","gridCopy","k","neighbors","forEach","x","y","newI","newK","setTimeout","onClick","style","width","height","backgroundColor","border","margin","marginLeft","display","justifyContent","gridTemplateColumns","map","col","key","newGrid","undefined","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qNAMMA,EAAa,CACjB,CAAC,EAAG,GACJ,CAAC,GAAI,GACL,CAAC,GAAI,GACL,EAAE,EAAG,GACL,CAAC,EAAG,GACJ,EAAE,GAAI,GACN,CAAC,EAAG,GACJ,EAAE,EAAG,IAIDC,EAAoB,WAExB,IADA,IAAMC,EAAO,GACJC,EAAI,EAAGA,EAjBF,GAiBeA,IAC3BD,EAAKE,KAAKC,MAAMC,KAAKD,MAjBT,KAiByB,kBAAM,MAG7C,OAAOH,GA8GMK,EA3GO,WAAO,IAAD,EACFC,oBAAS,WAC/B,OAAOP,OAFiB,mBACnBQ,EADmB,KACbC,EADa,OAKIF,oBAAS,GALb,mBAKnBG,EALmB,KAKVC,EALU,KAOpBC,EAAaC,iBAAOH,GAC1BE,EAAWE,QAAUJ,EAErB,IAAMK,EAAgBC,uBAAY,WAC3BJ,EAAWE,UAIhBL,GAAQ,SAACQ,GACP,OAAOC,YAAQD,GAAG,SAACE,GACjB,IAD+B,IAAD,WACrBjB,GACP,IAF4B,eAEnBkB,GACP,IAAIC,EAAY,EAChBtB,EAAWuB,SAAQ,YAAa,IAAD,mBAAVC,EAAU,KAAPC,EAAO,KACvBC,EAAOvB,EAAIqB,EACXG,EAAON,EAAII,EACbC,GAAQ,GAAKA,EA/Cf,IA+CiCC,GAAQ,GAAKA,EA9C9C,KA+CAL,GAAaJ,EAAEQ,GAAMC,OAIrBL,EAAY,GAAKA,EAAY,EAC/BF,EAASjB,GAAGkB,GAAK,EACI,IAAZH,EAAEf,GAAGkB,IAA0B,IAAdC,IAC1BF,EAASjB,GAAGkB,GAAK,IAbZA,EAAI,EAAGA,EAzCV,GAyCuBA,IAAM,EAA1BA,IADFlB,EAAI,EAAGA,EAzCR,GAyCqBA,IAAM,EAA1BA,SAqBbyB,WAAWZ,EAAe,QACzB,IAEH,OACE,oCACE,4BACEa,QAAS,WACPjB,GAAYD,GACPA,IACHE,EAAWE,SAAU,EACrBC,MAGJc,MAAO,CACLC,MAAO,GACPC,OAAQ,GACRC,gBAAiB,MACjBC,OAAQ,kBACRC,OAAQ,OACRC,WAAY,MAGbzB,EAAU,OAAS,SAEtB,4BACEkB,QAAS,WACPnB,EAAQT,MAEV6B,MAAO,CACLC,MAAO,GACPC,OAAQ,GACRC,gBAAiB,MACjBC,OAAQ,kBACRC,OAAO,YATX,SAcA,yBACEL,MAAO,CACLO,QAAS,OACTC,eAAgB,SAChBC,oBAAoB,UAAD,OAvGb,GAuGa,aAGpB9B,EAAK+B,KAAI,SAACtC,EAAMC,GAAP,OACRD,EAAKsC,KAAI,SAACC,EAAKpB,GAAN,OACP,yBACEqB,IAAG,UAAKvC,EAAL,YAAUkB,GACbQ,QAAS,WACP,IAAMc,EAAUxB,YAAQV,GAAM,SAACW,GAC7BA,EAASjB,GAAGkB,GAAKZ,EAAKN,GAAGkB,GAAK,EAAI,KAEpCX,EAAQiC,IAEVb,MAAO,CACLC,MAAO,GACPC,OAAQ,GACRC,gBAAiBxB,EAAKN,GAAGkB,GAAK,aAAUuB,EACxCV,OAAQ,8BCtHxBW,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,U","file":"static/js/main.05a27fde.chunk.js","sourcesContent":["import React, { useState, useCallback, useRef } from \"react\";\nimport produce from \"immer\";\n\nconst numRows = 50;\nconst numCols = 50;\n\nconst operations = [\n  [0, 1],\n  [0, -1],\n  [1, -1],\n  [-1, 1],\n  [1, 1],\n  [-1, -1],\n  [1, 0],\n  [-1, 0],\n];\n\n// Function generate grid\nconst generateEmptyGrid = () => {\n  const rows = [];\n  for (let i = 0; i < numRows; i++) {\n    rows.push(Array.from(Array(numCols), () => 0));\n  }\n\n  return rows;\n};\n\nconst App: React.FC = () => {\n  const [grid, setGrid] = useState(() => {\n    return generateEmptyGrid();\n  });\n\n  const [running, setRunning] = useState(false);\n\n  const runningRef = useRef(running);\n  runningRef.current = running;\n\n  const runSimulation = useCallback(() => {\n    if (!runningRef.current) {\n      return;\n    }\n\n    setGrid((g) => {\n      return produce(g, (gridCopy) => {\n        for (let i = 0; i < numRows; i++) {\n          for (let k = 0; k < numCols; k++) {\n            let neighbors = 0;\n            operations.forEach(([x, y]) => {\n              const newI = i + x;\n              const newK = k + y;\n              if (newI >= 0 && newI < numRows && newK >= 0 && newK < numCols) {\n                neighbors += g[newI][newK];\n              }\n            });\n\n            if (neighbors < 2 || neighbors > 3) {\n              gridCopy[i][k] = 0;\n            } else if (g[i][k] === 0 && neighbors === 3) {\n              gridCopy[i][k] = 1;\n            }\n          }\n        }\n      });\n    });\n\n    setTimeout(runSimulation, 100);\n  }, []);\n\n  return (\n    <>\n      <button\n        onClick={() => {\n          setRunning(!running);\n          if (!running) {\n            runningRef.current = true;\n            runSimulation();\n          }\n        }}\n        style={{\n          width: 50,\n          height: 40,\n          backgroundColor: \"red\",\n          border: \"solid 1px black\",\n          margin: \"auto\",\n          marginLeft: 750,\n        }}\n      >\n        {running ? \"stop\" : \"start\"}\n      </button>\n      <button\n        onClick={() => {\n          setGrid(generateEmptyGrid());\n        }}\n        style={{\n          width: 50,\n          height: 40,\n          backgroundColor: \"red\",\n          border: \"solid 1px black\",\n          margin: `0, auto`,\n        }}\n      >\n        clear\n      </button>\n      <div\n        style={{\n          display: \"grid\",\n          justifyContent: \"center\",\n          gridTemplateColumns: `repeat(${numCols}, 10px)`,\n        }}\n      >\n        {grid.map((rows, i) =>\n          rows.map((col, k) => (\n            <div\n              key={`${i}-${k}`}\n              onClick={() => {\n                const newGrid = produce(grid, (gridCopy) => {\n                  gridCopy[i][k] = grid[i][k] ? 0 : 1;\n                });\n                setGrid(newGrid);\n              }}\n              style={{\n                width: 10,\n                height: 10,\n                backgroundColor: grid[i][k] ? \"black\" : undefined,\n                border: \"solid 1px black\",\n              }}\n            />\n          ))\n        )}\n      </div>\n    </>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}